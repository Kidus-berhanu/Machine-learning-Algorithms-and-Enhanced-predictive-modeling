import pandas as pd
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score, adjusted_rand_score, adjusted_mutual_info_score
import matplotlib.pyplot as plt

def main():
  # Read in fruit data from CSV file
  fruit_data = pd.read_csv("fruit_data.csv")

  # Handle missing valuesx
  imputer = SimpleImputer(strategy="most_frequent")
  X = imputer.fit_transform(fruit_data[["color", "diameter", "weight"]])

  # Encode categorical variables
  encoder = OneHotEncoder()
  y = encoder.fit_transform(fruit_data[["fruit"]])

  # Standardize the data
  scaler = StandardScaler()
  X_scaled = scaler.fit_transform(X)

  # Train KMeans clustering model
  kmeans = KMeans(n_clusters=3)
  kmeans.fit(X_scaled)

  # Predict fruit clusters
  predictions = kmeans.predict(X_scaled)

  # Print fruit labels and predicted clusters
  for i in range(len(y)):
    print(f"{y[i]}: {predictions[i]}")

  # Evaluate model performance
  performance = evaluate_model(X_scaled, predictions, y)
  print(f"Model performance:")
  for metric, value in performance.items():
    print(f"  {metric}: {value:.3f}
